项目笔记：
--------------------------------------------------------------------------------------
什么是springboot？
内置Tomcat，提供了自动配置，搭建spring应用的脚手架(可快速搭建spring应用)
解决了spring复杂的配置和混乱的依赖关系
--------------------------------------------------------------------------------------
<!--所有的springboot应用都要以该工程为父工程-->
<parent>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-parent</artifactId>
<version>2.1.8.RELEASE</version>
</parent>
<!--启动器：每一个启动器都是依赖很多其他依赖，不用关心版本号和冲突问题-->
<dependencies>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-web</artifactId>
</dependency>
</dependencies>
---------------------------------------------------------------------------------------
Springboot的几个注解：
@RestController注解等于ResponseBody+Controller，被注解的Controller都应该返回json类型的数据
@EnableAutoConfiguration  (开启自动配置) 在classpath中引入什么依赖，此注解会配置相应的配置文件
@ComponentScan (注解扫描) 类似于<context:component-scanbase-package="">扫描该类所在的包，以及它的子包
@SpringbootConfiguration 本质是@Configuration 声明一个类是java配置类 比如说连接池
@SpringBootApplication //使用组合注解已经包含ComponentScan和EnableAutoConfiguration和SpringbootConfiguration
@ConfigurationProperties(prefix="jdbc")  通过set，get方法从application.properties文件中读取
@EnableConfigurationProperties(JdbcProperties.class) 在配置类上开启这个注解，注入jdbcproperties
---------------------------------------------------------------------------------------
Spring的几个注解：
@Configuration 声明一个类是注解类，相当于xml配置文件，例如：DataSource配置
@PropertySource 读取资源文件，例如：resources目录下的jdbc.properties文件
@Bean 标记在方法上，把方法的返回值注入到spring容器注册bean
@Value("${jdbc.driverClassName}")：从jdbc.properties文件中获取值
---------------------------------------------------------------------------------------
springboot的四种属性注入方式：
1.@Autowired注入
2.构造方法注入
3.@Bean方法形参注入
4.直接在@Bean方法上使用@ConfigurationProperties(prefix = "jdbc")
---------------------------------------------------------------------------------------
Springboot默认配置文件：application.properties  / application.yml
---------------------------------------------------------------------------------------
服务调用方式：
无论是微服务还是SOA，都面临着服务间的远程调用，服务间的远程调用方式有哪些？
RPC：
Remote produce call远程过程调用，类似的还有RMC。自定义数据格式，基于原生TCP通信，速度快，效率高。
早期的webservice，现在热门的dubbo，都是RPC的典型代表。
HTTP：
http其实是一种网络传输协议，基于TCP，规定了数据传输的格式，现在客户端浏览器与服务端通信基本都是采用
http协议，也可以用来进行远程服务调用。缺点是消息封装臃肿，优势是对服务的提供和调用没有任何技术限定，
自由灵活，更符合微服务理念。现在热门的Rest风格，就可以通过http协议来实现。
---------------------------------------------------------------------------------------
SpringCloud分布式开发五大组件详解
服务发现——Eureka：服务治理组件，包含服务注册中心，服务注册与发现机制的实现
服务网关——Zuul：网关组件，提供智能路由，访问过滤功能
客服端负载均衡——Ribbon：客户端负载均衡的服务调用组件
服务调用——Feign：服务调用，给予Ribbon和Hystrix的声明式服务调用组件
断路器——Hystrix：容错管理组件，实现断路器模式，帮助服务依赖中出现的延迟和为故障提供强大的容错能力。
